<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.Extended.4</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.Extended.C1Book">
      <summary>
            C1Book is an ItemsControl that contains elements which are shown as pages of a book. End-users can turn the pages as they would in a real book by using the mouse to drag the pages or double-clicking the corner page.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.getItems">
      <summary>
            Instead of Items property to get items in case of single page mode.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.TurnPage(System.Boolean)">
      <summary>
            Turns to the next or previous page with a page folding animation.
            </summary>
      <param name="forward">True to turn to the next page, false to turn to the previous page.</param>
      <returns>True if the page started to turn.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.CurrentPageProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.CurrentPage" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.ShowInnerShadowsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.ShowInnerShadows" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.ShowOuterShadowsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.ShowOuterShadows" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.LeftPageTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.LeftPageTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.RightPageTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.RightPageTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.IsFirstPageOnTheRightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.IsFirstPageOnTheRight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.ShowPageFoldProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.ShowPageFold" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.FoldSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.FoldSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.TurnIntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.TurnInterval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.PageFoldActionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.PageFoldAction" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.CurrentZoneProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.CurrentZone" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.DropToleranceProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.DropTolerance" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.PageModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Book.PageMode" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.GetApplyPageTemplate(System.Windows.DependencyObject)">
      <summary> 
            Gets the value of the ApplyPageTemplate attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element from which to read the attached property.
            </param>
      <returns>The value of the ApplyPageTemplate property.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.SetApplyPageTemplate(System.Windows.DependencyObject,C1.WPF.Extended.ApplyPageTemplate)">
      <summary> 
            Sets the value of the ApplyPageTemplate attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element to write the attached property to.
            </param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="F:C1.WPF.Extended.C1Book.ApplyPageTemplateProperty">
      <summary> 
            Identifies the ApplyPageTemplate attached property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1Book" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1Book" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.C1Book.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.Extended.C1Book.DragPageStarted">
      <summary>
            Occurs when the page starts to be dragged.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Book.DragPageFinished">
      <summary>
            Occurs when the page stops being dragged.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.CurrentPage">
      <summary>
            Gets or sets the current page that is displayed
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Book.CurrentPageChanged">
      <summary> 
            Event raised when the <see cref="P:CurrentPage" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.ShowInnerShadows">
      <summary>
            Gets or sets whether the inner shadows are shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.ShowOuterShadows">
      <summary>
            Gets or sets whether the outer shadows are shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.LeftPageTemplate">
      <summary>
            Gets or sets the template of the page shown in the left side of the book.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.RightPageTemplate">
      <summary>
            Gets or sets the template of the page shown in the right side of the book.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.IsFirstPageOnTheRight">
      <summary>
            Gets or sets whether the first page of the book is displayed in the right side of the book.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.ShowPageFold">
      <summary>
            Gets or sets whether the fold is displayed
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.FoldSize">
      <summary>
            Gets or sets the size of the fold (in pixels)
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.TurnInterval">
      <summary>
            Gets or sets the amount (in milliseconds) of time of the turn animation.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.PageFoldAction">
      <summary>
            Gets or sets the action that will raise the turn animation.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.Orientation">
      <summary>
            Gets or sets the orientation of the pages.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.CurrentZone">
      <summary>
            Gets the zone of the book under the mouse.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Book.CurrentZoneChanged">
      <summary> 
            Event raised when the <see cref="P:CurrentZone" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.ItemContainerStyle">
      <summary>
            Gets or sets the style applied to all item containers.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.DropTolerance">
      <summary>
            Gets or sets the position where pages begin to turn when dropped. If the value is 0.0, the default, pages only turns if dropped over the opposite page. Positive values are understood of a proportion of the page width that still trigger a page turn.  If value is 0.1, dropping a left page 10 percent to the left of the center of the book still turns the page.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Book.PageMode">
      <summary>
            Gets or sets the mode of page.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Book.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1Accordion">
      <remarks>
            C1Accordion is an <see cref="T:System.Windows.Controls.ItemsControl" /> so items are added to the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection or a collection is set to <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />.
            Either way, if a UIElement is added that is not a <see cref="T:C1.Silverlight.Extended.C1AccordionItem" /> it is shown inside a C1AccordionItem as its Content.
            When using <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> the behavior is similar. If the template doesn't generate a C1AccordionItem, the generated element from the template is shown inside a C1AccordionItem.
            C1Accordion uses a Grid as its ItemsPanel. If <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> is set to a different Panel the layout won't work correctly.
            </remarks>
      <summary>
        <see cref="T:System.Windows.Controls.ItemsControl" /> that contains <see cref="T:C1.WPF.Extended.C1AccordionItem" />. It allows only one item to be expanded at a time (similar to the NavigationBar in Outlook).
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Accordion.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1Accordion.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.FillProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.Fill" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.AllowCollapseAllProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.AllowCollapseAll" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.ExpandDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.ExpandDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.ItemStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.ItemStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderFontFamilyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderFontFamily" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderFontSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderFontSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderFontStretchProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderFontStretch" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderFontStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderFontStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderFontWeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderFontWeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderPadding" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HorizontalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HorizontalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.VerticalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.VerticalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.ExpandedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.ExpandedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Accordion.DisabledBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Accordion.DisabledBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Accordion.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1Accordion" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Accordion.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1Accordion" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.C1Accordion.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.ExpandedItem">
      <summary>
            Gets the currently expanded item or null if no item is expanded.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Accordion.IsItemExpandedChanged">
      <summary>
            Occurs when an item is expanded or collapsed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.Panel">
      <summary>
            Gets the panel associated with this items control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.Fill">
      <summary>
            Gets or sets whether the expanded item should fill the remaining space in the control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.AllowCollapseAll">
      <summary>
            Gets or sets whether the accordion allows the user to collapse all items.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.ExpandDirection">
      <summary>
            Gets or sets the direction the contained <see cref="T:C1.WPF.Extended.C1AccordionItem" />s expands.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.ItemStyle">
      <summary>
            Gets or sets the Style that is applied to each <see cref="T:C1.WPF.Extended.C1AccordionItem" />.
            </summary>
      <remarks>
            If the Item added is a <see cref="T:C1.WPF.Extended.C1AccordionItem" /> then the Style is applied only if the Item doesn't have a Style already applied.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Accordion.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderFontFamily">
      <summary>
            Gets or sets the font family of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderFontSize">
      <summary>
            Gets or sets the font size of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderFontStretch">
      <summary>
            Gets or sets the font stretch of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderFontStyle">
      <summary>
            Gets or sets the font style of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderFontWeight">
      <summary>
            Gets or sets the font weight of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderPadding">
      <summary>
            Gets or sets the padding of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HorizontalHeaderAlignment">
      <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.VerticalHeaderAlignment">
      <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.ExpandedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be used when the control is expanded.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Accordion.DisabledBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when is disabled.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1AccordionItem">
      <summary>
            Represents the items that can be hosted in a <see cref="T:C1.WPF.Extended.C1Accordion" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1Expander">
      <summary>
            C1Expander is a <see cref="T:C1.WPF.C1HeaderedContentControl" /> with a collapsible/expandable panel. The content is visible by clicking on the header.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Expander.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1Expander.ChangeVisualStateExpansion(System.Boolean)">
      <summary>
            Updates the current visual state of the Expansion visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Expander.ChangeVisualStateDirection(System.Boolean)">
      <summary>
            Updates the current visual state of the Direction visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.IsExpandedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.IsExpanded" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.IsExpandableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.IsExpandable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.ExpandDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.ExpandDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.ExpandedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.ExpandedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1Expander.DisabledBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1Expander.DisabledBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Expander.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1Expander" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1Expander.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1Expander" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.IsExpanded">
      <summary>
            Gets or sets whether the expander content is visible.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1Expander.IsExpandedChanged">
      <summary> 
            Event raised when the <see cref="P:IsExpanded" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.IsExpandable">
      <summary>
            Gets or sets whether the expander can be expanded and collapsed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.ExpandDirection">
      <summary>
            Gets or sets the direction the expander expands.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.ExpandedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be used when the control is expanded.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1Expander.DisabledBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when is disabled.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionItem.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1AccordionItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1AccordionItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.Extended.C1ExpanderButton">
      <summary>
            Toggle Button whose ExpandDirection property and states are used to change 
            the appearance of the expand button of the <see cref="T:C1.WPF.Extended.C1Expander" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ExpanderButton.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1ExpanderButton.ChangeVisualStateDirection(System.Boolean)">
      <summary>
            Updates the current visual state of the Direction visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.ExpandDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.ExpandDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ExpanderButton.DisabledBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ExpanderButton.DisabledBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ExpanderButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1ExpanderButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ExpanderButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1ExpanderButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.ExpandDirection">
      <summary>
            Gets or sets the direction the expander expands.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ExpanderButton.DisabledBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when is disabled.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1PropertyGrid">
      <summary>
            The C1PropertyGrid Provides a user interface for browsing the properties of an object. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.EditorPaddingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.EditorPadding" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertyBorderBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertyBorderBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertyBorderThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertyBorderThickness" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.GetEditorControl(System.String)">
      <summary>
            Gets the editor control associated to the specified property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The associated editor.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.GetLabel(System.String)">
      <summary>
            Gets the label associated to the specified property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The associated label.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.GetPropertyPresenter(System.String)">
      <summary>
            Returns the PropertyBox created for a given property of the SelectedObject.
            </summary>
      <param name="propertyName">The property of the SelectedObject</param>
      <returns>The current PropertyBox</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.GetMethodPresenter(System.String)">
      <summary>
            Returns the MethodBox created for a given method of the SelectedObject.
            </summary>
      <param name="methodName">The method of the SelectedObject</param>
      <returns>The current MethodBox</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.SelectedObjectProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.SelectedObject" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertyAttributesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertyAttributes" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MethodAttributesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MethodAttributes" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.AutoGeneratePropertiesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.AutoGenerateProperties" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.AutoGenerateMethodsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.AutoGenerateMethods" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MethodsPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MethodsPanel" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertiesPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertiesPanel" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertyBoxesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertyBoxes" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MethodBoxesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MethodBoxes" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.LabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.LabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.EditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.EditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.LabelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.LabelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.CategoryContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.CategoryContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PropertySortProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PropertySort" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.DefaultCategoryNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.DefaultCategoryName" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.ShowDescriptionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.ShowDescription" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.ShowResetButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.ShowResetButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MinLabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MinLabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MinEditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MinEditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MaxLabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MaxLabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MaxEditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MaxEditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.ScrollBarStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.ScrollBarStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.SelectedObjectsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.SelectedObjects" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.CategoryBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.CategoryBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1PropertyGrid.CategoryForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1PropertyGrid.CategoryForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1PropertyGrid" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1PropertyGrid" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.C1PropertyGrid.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.AvailableEditors">
      <summary>
            The list of currently available editors to use in the C1PropertyGrid.
            The default list includes editors for: bool, Color, Brush, ColorPalette,
            Enum, Numeric, String, Image and Uri values.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.ValueChanged">
      <summary>
            Fired when the value of a property in the current SelectedObject changes.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.CategoryContainerAdded">
      <summary>
            Fired when a category container is added to the C1PropertyGrid.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.CategoryContainerRemoved">
      <summary>
            Fired when a category container is removed from the C1PropertyGrid.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.AddingPropertyBox">
      <summary>
            Fired before a property box is added to the C1PropertyGrid.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyBoxAdded">
      <summary>
            Fired when a property box is added to the C1PropertyGrid.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyBoxRemoved">
      <summary>
            Fired when a property box is removed from the C1PropertyGrid.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyBoxesLoaded">
      <summary>
            Fired when the all the property boxes in C1PropertyGrid were loaded.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.MethodBoxesLoaded">
      <summary>
            Fired when the all the method boxes in C1PropertyGrid were loaded.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyBoxChanged">
      <summary>
            Fired when the generated list of property editors for the SelectedObject changes.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.MethodBoxChanged">
      <summary>
            Fired when the generated list of method editors for the SelectedObject changes.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyResetting">
      <summary>
            Fired before a property value gets reset.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.PropertyReset">
      <summary>
            Fired when a property value gets reset.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.CategoryContainers">
      <summary>
            The list of category containers (if defined) created to show each category
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.EditorPadding">
      <summary>
            Gets or sets the padding that will be applied to the PropertyBox.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertyBorderBrush">
      <summary>
            Gets or sets the brush that will be applied to the border.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertyBorderThickness">
      <summary>
            Gets or sets the thickness that will be applied to the border.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.Item(System.String)">
      <summary>
            Gets the <see cref="!:C1.Silverlight.Extended.PropertyBox" /> with the specified property name.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.SelectedObject">
      <summary>
            Gets or sets the object for which the C1PropertyGrid displays properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertyAttributes">
      <summary>
            Gets the list of property attributes used to configure the visualization of the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MethodAttributes">
      <summary>
            Gets the list of method attributes used to configure the visualization of the SelectedObject's methods.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.AutoGenerateProperties">
      <summary>
            Gets or sets a value indicating whether the C1PropertyGrid should try to get the properties of the SelectedObject using reflection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.AutoGenerateMethods">
      <summary>
            Gets or sets a value indicating whether the C1PropertyGrid should try to get the methods of the SelectedObject using reflection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MethodsPanel">
      <summary>
            Gets or sets the template that defines the panel that controls the layout of methods.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertiesPanel">
      <summary>
            Gets or sets the template that defines the panel that controls the layout of properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertyBoxes">
      <summary>
            Gets the PropertyBoxes generated to show the SelectedObject's properties on the C1PropertyGrid.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MethodBoxes">
      <summary>
            Gets the MethodBoxes generated to show the SelectedObject's methods on the C1PropertyGrid.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.LabelWidth">
      <summary>
            Gets or sets the width of generated labels for the SelectedObject's properties.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.LabelWidthChanged">
      <summary> 
            Event raised when the <see cref="P:LabelWidth" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.EditorWidth">
      <summary>
            Gets or sets the width of generated editors for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.LabelStyle">
      <summary>
            Gets or sets the Style applied to all the generated labels for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.CategoryContainerStyle">
      <summary>
            Gets or sets the Style applied to all the generated category containers.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PropertySort">
      <summary>
            Gets or sets the type of sorting the PropertyGrid uses to display properties. 
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.DefaultCategoryName">
      <summary>
            Gets or sets the name used for the default category in which the properties are placed.
            </summary>
      <remarks>
            If DefaultCategoryName is set to a non-empty value. All the properties of the SelectedObject with no category value will be placed in the Default category.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.ShowDescription">
      <summary>
            Gets or sets a value indicating whether the 'Description' of the properties will be shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.ShowResetButton">
      <summary>
            Gets or sets a value indicating whether the reset button will be shown in all the property boxes.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MinLabelWidth">
      <summary>
            Gets or sets the minimum width of generated labels for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MinEditorWidth">
      <summary>
            Gets or sets the minimum width of generated editors for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MaxLabelWidth">
      <summary>
            Gets or sets the maximum width of generated labels for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MaxEditorWidth">
      <summary>
            Gets or sets the maximum width of generated editors for the SelectedObject's properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.ScrollBarStyle">
      <summary>
            Gets or set the style that will be applied to the scrollbars.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.SelectedObjects">
      <summary>
            Gets or sets the objects for which the C1PropertyGrid displays properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1PropertyGrid.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.CategoryBackground">
      <summary>
            Gets or sets the Brush used for the category container Background.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1PropertyGrid.CategoryForeground">
      <summary>
            Gets or sets the Brush used for the category container Foreground.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyBox">
      <summary>
            The control used by the C1PropertyGrid to display the SelectedObject's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.ResetValue">
      <summary>
            Resets the value.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes
            can override this method to define their own Arrange pass behavior.
            </summary>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
      <returns>The actual size that is used after the element is arranged in layout.</returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.ChangeVisualStateResetButton(System.Boolean)">
      <summary>
            Updates the current visual state of the ResetButton visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.PropertyAttributeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.PropertyAttribute" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.LabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.LabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.EditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.EditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.LabelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.LabelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.ShowResetButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.ShowResetButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.MinLabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.MinLabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.MinEditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.MinEditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.MaxLabelWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.MaxLabelWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.MaxEditorWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.MaxEditorWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyBox.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyBox.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.PropertyBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.PropertyBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.Extended.PropertyBox.PropertyResetting">
      <summary>
            Fired before a property value gets reset.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyBox.PropertyReset">
      <summary>
            Fired when a property value gets reset.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.AvailableEditors">
      <summary>
            The list of currently available editors to use in the C1PropertyGrid.
            The default list includes editors for: bool, Color, Brush, ColorPalette,
            Enum, Numeric, String, Image and Uri values.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyBox.ValueChanged">
      <summary>
            Fired when the value of a property in the current SelectedObject changes.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.CurrentEditor">
      <summary>
            Gets or sets the current editor used by this property box.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.Label">
      <summary>
            Gets the label created for this property box.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.Panel">
      <summary>
            Gets the panel that contains the label and the editor of the property box.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.ResetButton">
      <summary>
            Gets the button that resets the property values.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.PropertyAttribute">
      <summary>
            Gets or sets the property attribute used to configure the PropertyBox.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.LabelWidth">
      <summary>
            Gets or sets the width of the label.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.EditorWidth">
      <summary>
            Gets or sets the width of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.LabelStyle">
      <summary>
            Gets or sets the Style applied to the label. 
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.ShowResetButton">
      <summary>
            Gets or sets a value indicating whether the reset button is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.MinLabelWidth">
      <summary>
            Gets or sets the minimum width of the label.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.MinEditorWidth">
      <summary>
            Gets or sets the minimum width of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.MaxLabelWidth">
      <summary>
            Gets or sets the maximum width of the label.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.MaxEditorWidth">
      <summary>
            Gets or sets the maximum width of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBox.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.MethodBox">
      <summary>
            The control used by the C1PropertyGrid to display the SelectedObject's methods.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.MethodBox.MethodAttributeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.MethodBox.MethodAttribute" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.MethodBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.MethodBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.MethodBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.MethodBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.MethodBox.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.MethodBox.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.MethodBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.MethodBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.MethodBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.Extended.MethodBox.MethodAttribute">
      <summary>
            Gets or sets the method attribute used to configure the MethodBox.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.MethodBox.MethodAttributeChanged">
      <summary> 
            Event raised when the <see cref="P:MethodAttribute" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.MethodBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodBox.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.BookDragPageFinishedEventArgs">
      <summary>
            Provides data for <see cref="E:C1.WPF.Extended.C1Book.DragPageFinished" /> event.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.BookDragPageFinishedEventArgs.TargetPage">
      <summary>
            Gets the index of the page that was dragged.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.BookZone">
      <summary>
            Represents the different zones inside a <see cref="T:C1.WPF.Extended.C1Book" />.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.Out">
      <summary>
            Specifies the zone outside the borders of the book.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.BottomLeft">
      <summary>
            Specifies the bottom left fold zone.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.TopLeft">
      <summary>
            Specifies the top left fold zone.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.Center">
      <summary>
            Specifies the center of the book.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.TopRight">
      <summary>
            Specifies the top right fold zone.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.BookZone.BottomRight">
      <summary>
            Specifies the bottom left fold zone.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ApplyPageTemplate">
      <summary>
            Specifies whether page templates should be used.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.ApplyPageTemplate.True">
      <summary>
            The page template will be applied to the page.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.ApplyPageTemplate.False">
      <summary>
            The page template won't be applied to the page
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PageFoldVisibility">
      <summary>
            Specifies page fold visibility.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldVisibility.OnMouseOver">
      <summary>
            The fold will be visible when user drag the mouse over the edge of the page.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldVisibility.Never">
      <summary>
            The fold wont be visible.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldVisibility.Always">
      <summary>
            The fold will be always visible.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PageFoldAction">
      <summary>
            Specifies how the page folds interact with the mouse.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldAction.TurnPageOnClick">
      <summary>
            Turn the page when the user clicks the page fold.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldAction.TurnPageOnDoubleClick">
      <summary>
            Turn the page when the user double clicks the page fold.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageFoldAction.None">
      <summary>
            Turn page when user drags the page fold across the book.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PageMode">
      <summary>
            Represents the different modes inside a <see cref="T:C1.WPF.Extended.C1Book" />.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageMode.OnePage">
      <summary>
            Specifies the single page of the book.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PageMode.TwoPage">
      <summary>
            Specifies the two page of the book.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1BookHalfSpan">
      <summary>
            C1BookHalfSpan simulates a single large element spanning two pages.  Put <see cref="T:C1.WPF.Extended.C1BookHalfSpan" />s in the <see cref="T:C1.WPF.Extended.C1BookItem" />s
            of opposite pages, adjust the <see cref="P:Dock" /> property,
            and repeat the content to get the illusion of a centerfold image.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BookHalfSpan.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1BookHalfSpan" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BookHalfSpan.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes
            can override this method to define their own Measure pass behavior.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BookHalfSpan.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes
            can override this method to define their own Arrange pass behavior.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BookHalfSpan.Dock">
      <summary>
            Position of the book item in the book when facing front.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1BookItem">
      <summary>
            Represents the items that can be hosted in a <see cref="T:C1.WPF.Extended.C1Book" />.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1BookItem.IsTransparentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BookItem.IsTransparent" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BookItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1BookItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BookItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1BookItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1BookItem.IsTransparent">
      <summary>
            Property used to indicate when a <see cref="T:C1.WPF.Extended.C1BookItem" /> contains transparent parts.
            </summary>
      <remarks>
            Note that <see cref="P:C1.WPF.Extended.C1Book.ShowOuterShadows" /> should be false when using transparent pages.
            </remarks>
    </member>
    <member name="T:C1.WPF.Extended.C1AdvancedColorPickerPart">
      <summary>
            Control that allows the user to create a personalized color by changing 
            the different components of the HSL or RGB representation of the color.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.SelectedColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.SelectedColor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.ShowAlphaChannelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.ShowAlphaChannel" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.InputBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.InputBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AdvancedColorPickerPart.InputForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AdvancedColorPickerPart.InputForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AdvancedColorPickerPart.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1AdvancedColorPickerPart" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AdvancedColorPickerPart.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1AdvancedColorPickerPart" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.Extended.C1AdvancedColorPickerPart.ColorPicked">
      <summary>
            Occurs when a color is chosen.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.SelectedColor">
      <summary>
            Gets or sets the currently selected color.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1AdvancedColorPickerPart.SelectedColorChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedColor" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.ShowAlphaChannel">
      <summary>
            Gets or sets whether the alpha channel must be shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.InputBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the input control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AdvancedColorPickerPart.InputForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> applied to the text inside an input control when this text is not selected.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1BasicColorPickerPart">
      <summary>
            Control that shows a range of predefined colors from a specified palette.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BasicColorPickerPart.CreateColorContainer">
      <summary>
            Override to change the default <see cref="T:System.Windows.Controls.ItemsControl" /> used.
            </summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemsControl" /> used to put several <see cref="T:C1.WPF.Extended.C1ColorButton" />.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1BasicColorPickerPart.CreateColorButton(System.Windows.Media.Color)">
      <summary>
            Override to change the default <see cref="T:C1.WPF.Extended.C1ColorButton" /> used for a <see cref="T:System.Windows.Media.Color" />.
            </summary>
      <param name="color">
        <see cref="T:System.Windows.Media.Color" /> that should be represented.</param>
      <returns>A <see cref="T:C1.WPF.Extended.C1ColorButton" /> for a specific <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1BasicColorPickerPart.CreateColorButton(C1.WPF.Extended.ColorPaletteEntry)">
      <summary>
            Override to change the default <see cref="T:C1.WPF.Extended.C1ColorButton" /> used for a <see cref="T:C1.WPF.Extended.ColorPaletteEntry" />.
            </summary>
      <param name="colorEntry">
        <see cref="T:C1.WPF.Extended.ColorPaletteEntry" /> that should be represented.</param>
      <returns>A <see cref="T:C1.WPF.Extended.C1ColorButton" /> for a specific <see cref="T:C1.WPF.Extended.ColorPaletteEntry" />.</returns>
    </member>
    <member name="F:C1.WPF.Extended.C1BasicColorPickerPart.SelectedColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BasicColorPickerPart.SelectedColor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1BasicColorPickerPart.PaletteProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BasicColorPickerPart.Palette" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1BasicColorPickerPart.ShowRecentColorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BasicColorPickerPart.ShowRecentColors" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1BasicColorPickerPart.ShowTransparentColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BasicColorPickerPart.ShowTransparentColor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1BasicColorPickerPart.ColorContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1BasicColorPickerPart.ColorContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BasicColorPickerPart.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1BasicColorPickerPart" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1BasicColorPickerPart.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1BasicColorPickerPart" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.Extended.C1BasicColorPickerPart.ColorPicked">
      <summary>
            Occurs when a color is chosen.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BasicColorPickerPart.SelectedColor">
      <summary>
            Gets or sets the currently selected color.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1BasicColorPickerPart.SelectedColorChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedColor" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BasicColorPickerPart.Palette">
      <summary>
            Gets or sets the palette used to display predefined colors.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BasicColorPickerPart.ShowRecentColors">
      <summary>
            Gets or sets a value indicating whether the recent colors should be shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BasicColorPickerPart.ShowTransparentColor">
      <summary>
            Gets or sets a value indicating whether the transparent color is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1BasicColorPickerPart.ColorContainerStyle">
      <summary>
            Gets or sets the style of the ItemsControl used to show a section of colors (that is recent colors).
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1CheckeredBorder">
      <summary>
            Border that display a color over a checkered pattern that is visible when a semi-transparent color is set, 
            allowing the user to distinguish easily between clear and transparent colors.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1CheckeredBorder.SquareBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1CheckeredBorder.SquareBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1CheckeredBorder.AlternatingSquareBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1CheckeredBorder.AlternatingSquareBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1CheckeredBorder.SquareWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1CheckeredBorder.SquareWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1CheckeredBorder.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1CheckeredBorder.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1CheckeredBorder.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1CheckeredBorder" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1CheckeredBorder.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1CheckeredBorder" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1CheckeredBorder.SquareBrush">
      <summary>
            Gets or sets the brush used to draw the squares in background.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1CheckeredBorder.SquareBrushChanged">
      <summary> 
            Event raised when the <see cref="P:SquareBrush" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1CheckeredBorder.AlternatingSquareBrush">
      <summary>
            Gets or sets the brush used to draw the alternating squares in background.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1CheckeredBorder.AlternatingSquareBrushChanged">
      <summary> 
            Event raised when the <see cref="P:AlternatingSquareBrush" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1CheckeredBorder.SquareWidth">
      <summary>
            Gets or sets the width of the squares in background.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1CheckeredBorder.SquareWidthChanged">
      <summary> 
            Event raised when the <see cref="P:SquareWidth" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1CheckeredBorder.CornerRadius">
      <summary>
            Gets or sets the radius of the corners.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1ColorButton">
      <summary>
            Button that shows a color, This control is used in the <see cref="T:C1.WPF.Extended.C1BasicColorPickerPart" />.
            </summary>
      <summary>
            Button that represents a color.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorButton.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorButton.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorButton.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorButton.ColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorButton.Color" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1ColorButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1ColorButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorButton.Click">
      <summary>
            Raises the click event.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorButton.IsSelected">
      <summary>
            Gets or sets whether the color that represent the button is the selected or not.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorButton.IsSelectedChanged">
      <summary> 
            Event raised when the <see cref="P:IsSelected" /> property has changed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorButton.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorButton.Color">
      <summary>
            Gets or sets the color shown in this button.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1ColorPicker">
      <summary>
            The C1ColorPicker control allows end-users to pick a color from a color palette or use the color editor to build advanced colors using the RGB or HSL color models. The C1ColorPicker control keeps a list of the recently used colors.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.SelectedColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.SelectedColor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.PaletteProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.Palette" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.IsDropDownOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.DropDownDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.DropDownDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.DropDownHeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.DropDownHeader" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ShowRecentColorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.ShowRecentColors" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.Mode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ColorContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.ColorContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.SelectedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.SelectedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ShowAlphaChannelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.ShowAlphaChannel" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ShowTransparentColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.ShowTransparentColor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.InputBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.InputBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPicker.InputForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1ColorPicker.InputForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1ColorPicker" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1ColorPicker" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorPicker.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.SelectedColor">
      <summary>
            Gets or sets the currently selected color.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorPicker.SelectedColorChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedColor" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.Palette">
      <summary>
            Gets or sets the palette displayed in the basic tab.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.IsDropDownOpen">
      <summary>
            Gets or sets a value indicating whether the drop down is opened or closed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorPicker.IsDropDownOpenChanged">
      <summary> 
            Event raised when the <see cref="P:IsDropDownOpen" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.DropDownDirection">
      <summary>
            Gets or sets the expand direction of the control drop down.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.DropDownHeader">
      <summary>
        <see cref="T:System.Windows.UIElement" /> used as header of the <see cref="T:C1.WPF.C1DropDown" />,
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.ShowRecentColors">
      <summary>
            Gets or sets a value indicating whether the recent selected colors should be shown or not.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.Mode">
      <summary>
            Gets or sets the mode indicating which of the basic and advanced controls are shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.ColorContainerStyle">
      <summary>
            Gets or sets the style of the ItemsControl used to show a section of colors (that is recent colors).
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.SelectedBrush">
      <summary>
            Gets the currently selected color as a <see cref="T:System.Windows.Media.Brush" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.ShowAlphaChannel">
      <summary>
            Gets or sets whether the alpha channel must be shown in the advanced control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.ShowTransparentColor">
      <summary>
            Gets or sets a value indicating whether the transparent color is shown in the basic control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1ColorPicker.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.InputBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the input control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1ColorPicker.InputForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> applied to the text inside an input control when this text is not selected.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1ColorSlider">
      <summary>
            Slider used to chose the hue of a color.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorSlider.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1ColorSlider" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1ColorSlider.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1ColorSlider" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.Extended.C1ColorPickerMode">
      <summary>
            Pick the mode for the <see cref="T:C1.WPF.Extended.C1ColorPicker" />.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPickerMode.Basic">
      <summary>
            Shows only the basic tab.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPickerMode.Advanced">
      <summary>
            Shows only the advanced tab.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1ColorPickerMode.Both">
      <summary>
            Shows both the basic and the advanced tabs.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1HexColorBox">
      <summary>
            Text box that shows a color in its hexadecimal representation.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1HexColorBox.ColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1HexColorBox.Color" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1HexColorBox.ShowAlphaChannelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1HexColorBox.ShowAlphaChannel" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1HexColorBox.ShowSharpPrefixProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1HexColorBox.ShowSharpPrefix" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1HexColorBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1HexColorBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1HexColorBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1HexColorBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1HexColorBox.Color">
      <summary>
            Gets or sets the color whose hexadecimal representation is displayed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1HexColorBox.ColorChanged">
      <summary> 
            Event raised when the <see cref="P:Color" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1HexColorBox.ShowAlphaChannel">
      <summary>
            Gets or sets whether the alpha channel must be shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1HexColorBox.ShowSharpPrefix">
      <summary>
            Gets or sets whether the sharp prefix must be shown.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1SpectrumColorPicker">
      <summary>
            Control that shows a gradient color gamut as well as a slider, 
            allowing the user to chose the color by dragging an indicator.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1SpectrumColorPicker.ColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1SpectrumColorPicker.Color" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1SpectrumColorPicker.ShowAlphaChannelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1SpectrumColorPicker.ShowAlphaChannel" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1SpectrumColorPicker.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1SpectrumColorPicker" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1SpectrumColorPicker.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1SpectrumColorPicker" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1SpectrumColorPicker.Color">
      <summary>
            Gets or sets the color shown in the control.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1SpectrumColorPicker.ColorChanged">
      <summary> 
            Event raised when the <see cref="P:Color" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1SpectrumColorPicker.ShowAlphaChannel">
      <summary>
            Gets or sets whether the alpha channel slider must be shown.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.C1SpectrumPad">
      <summary>
            Control that shows a gradient color gamut allowing the user to chose the color by dragging an indicator.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1SpectrumPad.ColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1SpectrumPad.Color" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1SpectrumPad.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1SpectrumPad" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1SpectrumPad.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.C1SpectrumPad" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Extended.C1SpectrumPad.Color">
      <summary>
            Gets or sets the color shown in the control.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.C1SpectrumPad.ColorChanged">
      <summary> 
            Event raised when the <see cref="P:Color" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ColorPalette">
      <summary>
            Class that defines named groups of colors.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.#ctor(System.String)">
      <summary>
            Creates an instance of the color palette with the specified theme name.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Contains(System.Windows.Media.Color)">
      <summary>
            Determines whether a color is in the palette.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.IndexOf(System.Windows.Media.Color)">
      <summary>
            Searches for the specified color in the palette and returns a zero-based index of the found entry.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Add(System.Windows.Media.Color)">
      <summary>
            Adds the specified color to the palette.
            </summary>
      <param name="color">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Add(System.Windows.Media.Color,System.String)">
      <summary>
            Adds the color with the specified name.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Add(System.Windows.Media.Color,System.String,System.String)">
      <summary>
            Adds the color with the specified name and description.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Set(System.Int32,System.Windows.Media.Color)">
      <summary>
            Assigns the color to the palette entry with the specified index.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Set(System.Int32,System.Windows.Media.Color,System.String)">
      <summary>
            Assigns the color and color name to the palette entry with the specified index.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Clear">
      <summary>
            Deletes all entries from the palette.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.Clone(System.String)">
      <summary>
            Returns a clone of this palette with the specified theme name.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPalette.GetColorPalette(C1.WPF.Extended.Office2007ColorTheme)">
      <summary>
            Returns one of the predefined color palettes.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPalette.ThemeName">
      <summary>
            Gets or sets the name of the color theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPalette.Item(System.Int32)">
      <summary>
            Gets the palette entry with the specified index.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPalette.Count">
      <summary>
            Gets the number of palette entries.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ColorPaletteEntry">
      <summary>
            Class that contains information about the color,
            its name and description.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPaletteEntry.SetColor(System.Windows.Media.Color)">
      <summary>
            Assign the color to this entry.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ColorPaletteEntry.SetColor(System.Windows.Media.Color,System.String)">
      <summary>
            Assign the color with the specified name to this entry.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPaletteEntry.Color">
      <summary>
            Gets the color of this entry.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPaletteEntry.ColorName">
      <summary>
            Gets the color name.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ColorPaletteEntry.Description">
      <summary>
            Gets or sets the entry description.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.Office2007ColorTheme">
      <summary>
            Specifies a color theme from the standard Office2007 theme collection.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Standard">
      <summary>
            Standard color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Highlight">
      <summary>
            Highlight color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Office">
      <summary>
            Office color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.GrayScale">
      <summary>
            GrayScale color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Apex">
      <summary>
            Apex color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Aspect">
      <summary>
            Aspect color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Civic">
      <summary>
            Civic color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Concourse">
      <summary>
            Concourse color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Equity">
      <summary>
            Equity color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Flow">
      <summary>
            Flow color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Foundry">
      <summary>
            Foundry color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Median">
      <summary>
            Median color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Metro">
      <summary>
            Metro color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Module">
      <summary>
            Module color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Opulent">
      <summary>
            Opulent color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Oriel">
      <summary>
            Oriel color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Origin">
      <summary>
            Origin color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Paper">
      <summary>
            Paper color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Solstice">
      <summary>
            Solstice color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Technic">
      <summary>
            Technic color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Trek">
      <summary>
            Trek color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Urban">
      <summary>
            Urban color theme.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.Office2007ColorTheme.Verve">
      <summary>
            Verve color theme.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.WebColor">
      <summary>
            Utility methods for web colors.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.WebColor.ToColor(System.String)">
      <summary>
            Convert a hex string to a .NET Color object.
            </summary>
      <param name="hexColor">A hex string: "FFFFFF", "#000000"</param>
    </member>
    <member name="M:C1.WPF.Extended.WebColor.ToColor(System.String,System.Byte)">
      <summary>
            Convert a hex string to a .NET Color object.
            </summary>
      <param name="hexColor">A hex string: "FFFFFF", "#000000"</param>
      <param name="alpha">Represents the alpha channel of the color.</param>
    </member>
    <member name="T:C1.WPF.Extended.C1AccordionPanel">
      <summary>
            Panel that lays out <see cref="T:C1.WPF.Extended.C1AccordionItem" />´s.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>
            The actual size used.
            </returns>
    </member>
    <member name="F:C1.WPF.Extended.C1AccordionPanel.FillProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AccordionPanel.Fill" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.C1AccordionPanel.ExpandDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.C1AccordionPanel.ExpandDirection" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.C1AccordionPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.C1AccordionPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AccordionPanel.Fill">
      <summary>
            Gets or sets whether the available space will be filled with the content of the expanded item.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.C1AccordionPanel.ExpandDirection">
      <summary>
            Gets or sets the direction of the items.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertySort">
      <summary>
            Specifies how properties are sorted in the C1PropertyGrid. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.NoSort">
      <summary>
            Properties are displayed in the order in which they are retrieved from the TypeDescriptor.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.Alphabetical">
      <summary>
            Properties are sorted in an alphabetical list.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.Categorized">
      <summary>
            Properties are displayed according to their category.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.CategorizedAlphabetical">
      <summary>
            Properties are displayed according to their category. The properties are further sorted alphabetically within the category.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.CategorizedCustom">
      <summary>
            Properties are displayed according to their category. The properties are further sorted according to the order assigned by the user.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertySort.Custom">
      <summary>
            Properties are displayed according to the order assigned by the user.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.CategoryContainerChangedEventArgs">
      <summary>
            Provides data for the CategoryContainerChanged event.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.CategoryContainerChangedEventArgs.#ctor(C1.WPF.Extended.C1Expander)">
      <summary>
            Initializes a new instance of the CategoryContainerChangedEventArgs class.
            </summary>
      <param name="categoryContainer">The category container that changed.</param>
    </member>
    <member name="P:C1.WPF.Extended.CategoryContainerChangedEventArgs.CategoryContainer">
      <summary>
            Gets the category container that changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyBoxChangedEventArgs">
      <summary>
            Provides data for the PropertyBoxChanged event.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBoxChangedEventArgs.#ctor(C1.WPF.Extended.PropertyBox)">
      <summary>
            Initializes a new instance of the PropertyBoxChangedEventArgs class.
            </summary>
      <param name="propertyBox">The property box that changed.</param>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBoxChangedEventArgs.PropertyBox">
      <summary>
            Gets the property box that changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ChangingPropertyBoxEventArgs">
      <summary>
            Provides data for the ChangingPropertyBoxEventArgs event.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ChangingPropertyBoxEventArgs.#ctor(System.Reflection.PropertyInfo,C1.WPF.Extended.PropertyBox)">
      <summary>
            Initializes a new instance of the AddingPropertyBoxEventArgs class.
            </summary>
      <param name="property">The property info associated to the PropertyBox.</param>
      <param name="propertyBox">The property being added.</param>
    </member>
    <member name="P:C1.WPF.Extended.ChangingPropertyBoxEventArgs.Property">
      <summary>
            Gets or sets the property info associated to the PropertyBox.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.ChangingPropertyBoxEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the event is canceled.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyBoxChangedEventHandler">
      <summary>
            Represents the method that will handle the PropertyBoxChanged event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A PropertyBoxChangedEventArgs that contains the event data.</param>
    </member>
    <member name="T:C1.WPF.Extended.ChangingPropertyBoxEventHandler">
      <summary>
            Represents the method that will handle the ChangingPropertyBox event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A ChangingPropertyBoxEventArgs that contains the event data.</param>
    </member>
    <member name="T:C1.WPF.Extended.CategoryContainerChangedEventHandler">
      <summary>
            Represents the method that will handle the CategoryContainerChanged event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A CategoryContainerChangedEventArgs that contains the event data.</param>
    </member>
    <member name="T:C1.WPF.Extended.BrowsableAttribute">
      <summary>
            Specifies whether a property or event should be displayed in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.BrowsableAttribute" /> class.
            </summary>
      <param name="isBrowsable">if set to <c>true</c> the property will be browsable.</param>
    </member>
    <member name="P:C1.WPF.Extended.BrowsableAttribute.Browsable">
      <summary>
            Returns the current value of the attribute.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.MinimumValueAttribute">
      <summary>
            Specifies the minimum allowed value for a property displayed in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MinimumValueAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.MinimumValueAttribute" /> class.
            </summary>
      <param name="minimumValue">The minimum value.</param>
    </member>
    <member name="P:C1.WPF.Extended.MinimumValueAttribute.MinimumValue">
      <summary>
            Returns the current value of the attribute.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.MaximumValueAttribute">
      <summary>
            Specifies the maximum allowed value for a property displayed in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MaximumValueAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.MaximumValueAttribute" /> class.
            </summary>
      <param name="maximumValue">The maximum value.</param>
    </member>
    <member name="P:C1.WPF.Extended.MaximumValueAttribute.MaximumValue">
      <summary>
            Returns the current value of the attribute.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.EditorAttribute">
      <summary>
            Specifies the editor to use for a property displayed in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.EditorAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.EditorAttribute" /> class.
            </summary>
      <param name="editor">The editor.</param>
    </member>
    <member name="P:C1.WPF.Extended.EditorAttribute.Editor">
      <summary>
            Returns the current value of the attribute.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.EditorAttribute.EditorInstance">
      <summary>
            Returns a new instance of the current Editor.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyBindingAttribute">
      <summary>
            Specifies the binding to use for a property bound to an editor in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyBindingAttribute.#ctor(System.Windows.Data.Binding)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.PropertyBindingAttribute" /> class.
            </summary>
      <param name="binding">The binding.</param>
    </member>
    <member name="P:C1.WPF.Extended.PropertyBindingAttribute.PropertyBinding">
      <summary>
            Returns the current value of the attribute.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.DisplayAttribute">
      <summary>
            Specifies display properties such as description and name for a property shown in a C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.DisplayAttribute.GetDescription">
      <summary>
            Gets the value of the Description property.
            </summary>
      <returns>The value of the Description property.</returns>
    </member>
    <member name="M:C1.WPF.Extended.DisplayAttribute.GetName">
      <summary>
            Gets a value that is used for field display in the UI.
            </summary>
      <returns>The value of the Name property.</returns>
    </member>
    <member name="M:C1.WPF.Extended.DisplayAttribute.GetOrder">
      <summary>
            Retrieves the value of the Order property.
            </summary>
      <returns>The value of the Order property if the property is set, or a null
            reference if the property is not set.</returns>
    </member>
    <member name="P:C1.WPF.Extended.DisplayAttribute.Description">
      <summary>
            Gets or sets either a text, such as a tool tip, that is displayed to users to help
            them understand a member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.DisplayAttribute.Name">
      <summary>
            Gets or sets a text that is used as a member label for elements that are bound to the member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.DisplayAttribute.Order">
      <summary>
            Gets or sets a value that indicates the order in which the properties are sorted.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.DisplayFormatAttribute">
      <summary>
            Specifies how data fields are displayed and formatted.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.DisplayFormatAttribute.DataFormatString">
      <summary>
            Gets or sets the string value that specifies how to display values for the member.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.BoolEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit bool values.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ITypeMutipleEditorControl">
      <summary>
            The Interface for the all the editors that support multiple objects used by the C1PropertyGrid.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ITypeEditorControl">
      <summary>
            The Interface for the all the editors used by the C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ITypeEditorControl.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ITypeEditorControl.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ITypeEditorControl.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ITypeEditorControl.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:C1.WPF.Extended.ITypeEditorControl.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.ITypeMutipleEditorControl.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.ITypeMutipleEditorControl.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BoolEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.BoolEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.BrushEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit Brush values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">a property group</param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.BrushEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.BrushEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.AdvancedEditor">
      <summary>
            Advanced editor which contains a button and the capability of 
            hosting other common PropertyGrid editors contained in a child window.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.AdvancedEditor.OnWindowCreated(C1.WPF.C1Window)">
      <summary>
            Invoked after the <see cref="T:C1.WPF.C1Window" /> instance was created.
            </summary>
      <param name="win">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.AdvancedEditor.OnOpenButtonClick(System.Object,System.Windows.RoutedEventArgs)">
      <summary>
            Called when the open window button is clicked.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.AdvancedEditor.LabelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.Label" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.AdvancedEditor.EditorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.Editor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.AdvancedEditor.WindowStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.WindowStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.AdvancedEditor.ButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.ButtonStyle" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.AdvancedEditor.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.PropertyGrid.AdvancedEditor" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.AdvancedEditor.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.PropertyGrid.AdvancedEditor" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.AdvancedEditor.WindowOpened">
      <summary>
            Occurs when child window is opened.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.Label">
      <summary>
            Gets the label of the advanced editor control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.Editor">
      <summary>
            Gets the editor used within this advanced editor control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.WindowStyle">
      <summary>
            Gets or sets the style applied to the advanced editor's window.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.AdvancedEditor.ButtonStyle">
      <summary>
            Gets or sets the style applied to the advanced editor's button.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.PropertyCommitChangesEventsArgs">
      <summary>
            Provides event data for commit changes events.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.CommitChangesEventsArgs">
      <summary>
            Provides event data for commit changes events.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CommitChangesEventsArgs.OldList">
      <summary>
            Gets or sets the list of items before committing the changes.
            </summary>
      <value>The old list.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CommitChangesEventsArgs.NewList">
      <summary>
            Gets or sets the list of items after committing the changes.
            </summary>
      <value>The new list.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CommitChangesEventsArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether this commit will be canceled.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.PropertyCommitChangesEventsArgs.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.CollectionEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit lists of values.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditor.EditorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.EditorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditor.SelectorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.SelectorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserAddItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserAddItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserRemoveItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserRemoveItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserSortItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserSortItems" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.#ctor(C1.WPF.Extended.C1PropertyGrid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.PropertyGrid.CollectionEditor" /> class.
            </summary>
      <param name="parent">The parent property grid.</param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.OnWindowCreated(C1.WPF.C1Window)">
      <summary>
            Invoked after the <see cref="T:C1.WPF.C1Window" /> instance was created.
            </summary>
      <param name="win">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.OnValueChanging(C1.WPF.Extended.PropertyGrid.CommitChangesEventsArgs)">
      <summary>
            Called before the bound value changes.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditor.OnOpenButtonClick(System.Object,System.Windows.RoutedEventArgs)">
      <summary>
            Called when open button is clicked.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.EditorStyle">
      <summary>
            Gets or sets the style applied to the collection editor's property grid.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.SelectorStyle">
      <summary>
            Gets or sets the style applied to the collection selector ListBox.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserAddItems">
      <summary>
            Gets or sets a value indicating whether the user can add items to the edited collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserRemoveItems">
      <summary>
            Gets or sets a value indicating whether the user can remove items from the edited collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditor.CanUserSortItems">
      <summary>
            Gets or sets a value indicating whether the user can sort items in the edited collection.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.CollectionEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.CollectionEditor.ValueChanging">
      <summary>
            Fired before the value of the current property is changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.CollectionEditorControl">
      <summary>
            Default editor used by C1PropertyGrid to edit lists of values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ReloadItems">
      <summary>
            Reloads the collection items in the control.
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsEditorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsEditor" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSelectorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSelector" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSourceProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSource" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.EditorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.EditorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.SelectorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.SelectorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserAddItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserAddItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserRemoveItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserRemoveItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserSortItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserSortItems" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.Extended.PropertyGrid.CollectionEditorControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Extended.PropertyGrid.CollectionEditorControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ValueChanged">
      <summary>
            Fired when the bound value of the editor has changed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ValueChanging">
      <summary>
            Fired before the bound value is changed.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.AvailableEditors">
      <summary>
            Gets or sets the available editors for the CollectionEditorControl.
            </summary>
      <value>The available editors.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.PropertyAttributes">
      <summary>
            Gets or sets the property attributes for the CollectionEditorControl.
            </summary>
      <value>The property attributes.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.MethodAttributes">
      <summary>
            Gets or sets the method attributes for the CollectionEditorControl.
            </summary>
      <value>The method attributes.</value>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsEditor">
      <summary>
            Gets the C1PropertyGrid used to edit the properties of the currently selected item.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSelector">
      <summary>
            Gets the ListBox used to show the list of items.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.ItemsSource">
      <summary>
            Gets or sets the list to be edited by the control.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.EditorStyle">
      <summary>
            Gets or sets the style applied to the collection editor's PropertyGrid.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.SelectorStyle">
      <summary>
            Gets or sets the style applied to the advanced editor's ListBox.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserAddItems">
      <summary>
            Gets or sets a value indicating whether the user can add items to the edited collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserRemoveItems">
      <summary>
            Gets or sets a value indicating whether the user can remove items from the edited collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.CollectionEditorControl.CanUserSortItems">
      <summary>
            Gets or sets a value indicating whether the user can sort items in the edited collection.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.PropertyWrapper">
      <summary>
            The PropertyWrapper class is used to show value types and string types in the
            C1PropertyGrid collection editor.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.PropertyWrapper.Value">
      <summary>
            Gets or sets the value of the current value type being shown in the C1PropertyGrid.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.PropertyWrapper`1">
      <summary>
            The PropertyWrapper class is used to show value types and string types in the
            C1PropertyGrid collection editor.
            </summary>
      <typeparam name="T">The value type being shown.</typeparam>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.PropertyWrapper`1.#ctor(System.Object)">
      <summary>
            Initializes a new instance of PropertyWrapper.
            </summary>
      <param name="value">The value of the value type being shown in the C1PropertyGrid.</param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.PropertyWrapper`1.ToString">
      <summary>
            Returns a String representing the name of the current value type.
            </summary>
      <returns>A System.String representing the name of the current value type.</returns>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGrid.PropertyWrapper`1.TypedValue">
      <summary>
            Gets or sets the value of the current value type being shown in the C1PropertyGrid.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.ColorEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit color values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.ColorEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit ColorPalette values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.ColorPaletteEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.EnumEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit Enum values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.PropertyGrid.EnumEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.Create">
      <summary>
            Creates and initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.EnumEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.EnumEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.ImageSourceEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit image values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.ImageSourceEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.NumericEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit numeric values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.NumericEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.NumericEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.StringEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit String values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.StringEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.StringEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.ThicknessConverter">
      <summary>
            Converts instances of String type to and from instances of Thickness.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGrid.UriEditor">
      <summary>
            Default editor used by C1PropertyGrid to edit Uri values.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.Create">
      <summary>
            Creates ands initializes a new instance of the editor
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.Supports(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Returns true if the editor supports (is able to show/edit) the property
            values described by the PropertyAttribute.
            </summary>
      <param name="Property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.Attach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Attaches (initializes) the editor with the current property.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.Attach(C1.WPF.Extended.PropertyGroup)">
      <summary>
            Attaches (initializes) the editor with the current Group.
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.Detach(C1.WPF.Extended.PropertyAttribute)">
      <summary>
            Detaches (releases) the editor that was attached with the property passed as parameter.
            </summary>
      <param name="property">
      </param>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.OnValueChanged">
      <summary>
            Called when value bound to this editor is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyGrid.UriEditor.SetDefaultValue">
      <summary>
            set a value when all properties in the group has not a same property value
            </summary>
    </member>
    <member name="E:C1.WPF.Extended.PropertyGrid.UriEditor.ValueChanged">
      <summary>
            Fired when the value of the current property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.MemberAttribute">
      <summary>
            Used to provide configuration information for the C1PropertyGrid.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.Tag">
      <summary>
            Gets or sets an arbitrary object value that can be used to store custom information
            about this member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.DisplayName">
      <summary>
            Gets or sets the name that will be displayed by the C1PropertyGrid when showing the member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.Browsable">
      <summary>
            Gets or sets a value indicating whether the member is browsable (will be shown in the C1PropertyGrid).
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.SelectedObject">
      <summary>
            Gets the current object this member attributes are applied to.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.MemberName">
      <summary>
            Gets or sets the name of the member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MemberAttribute.Category">
      <summary>
            Specifies the name of the category in which to group the member when displayed in
            The C1PropertyGrid.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyAttribute">
      <summary>
            Used to provide configuration information for the C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.PropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.PropertyAttribute" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.DisplayIndex">
      <summary>
            Gets or sets the index that will be used to sort the properties.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.MinimumValue">
      <summary>
            Gets or sets the minimum allowed value for the property (applies only to numeric properties).
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.MaximumValue">
      <summary>
            Gets or sets the maximum allowed value for the property (applies only to numeric properties).
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.DefaultValue">
      <summary>
            Gets or sets the default value for the property.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.Editor">
      <summary>
            Gets or sets the current editor selected for the property.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.PropertyBinding">
      <summary>
            Gets or sets the Binding to use when the property is bound to its associated editor.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.Format">
      <summary>
            Gets or sets a string representing the desired Format for the property value.
            e.g. a specific numeric format to use in the numeric editor associated to the property).
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.Description">
      <summary>
            Gets or sets a text, such as a tool tip, that is displayed to users to help them
            understand a member.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the property value can be edited.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyAttribute.PropertyInfo">
      <summary>
            Gets the PropertyInfo corresponding to the current property.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.MethodAttribute">
      <summary>
            Used to provide configuration information for the C1PropertyGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.Extended.MethodAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Extended.MethodAttribute" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodAttribute.Parameters">
      <summary>
            Gets or sets the ordered list of parameter Types in the methods signature.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodAttribute.ParameterValues">
      <summary>
            Gets or sets the ordered list of parameter values used to invoke the method.
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.MethodAttribute.MethodInfo">
      <summary>
            Gets the MethodInfo corresponding to the current method.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.PropertyGroup">
      <summary>
            Contained a group of propertyAttribute which has same propertyInfo
            </summary>
    </member>
    <member name="P:C1.WPF.Extended.PropertyGroup.PropertyAttributes">
      <summary>
            a group of propertyAttribute which has same propertyInfo
            </summary>
    </member>
    <member name="T:C1.Silverlight.Resources.C1_Silverlight_Extended">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.AdvancedEditor_Collection">
      <summary>
              Looks up a localized string similar to (Collection).
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.AdvancedEditor_CollectionEditor">
      <summary>
              Looks up a localized string similar to Collection Editor.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Add">
      <summary>
              Looks up a localized string similar to Add another item.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Cancel">
      <summary>
              Looks up a localized string similar to Cancel.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Down">
      <summary>
              Looks up a localized string similar to Down.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Items">
      <summary>
              Looks up a localized string similar to Items.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Properties">
      <summary>
              Looks up a localized string similar to Properties.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Remove">
      <summary>
              Looks up a localized string similar to Remove.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.CollectionEditorControl_Up">
      <summary>
              Looks up a localized string similar to Up.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_Advanced">
      <summary>
              Looks up a localized string similar to Advanced.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_Basic">
      <summary>
              Looks up a localized string similar to Basic.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_CustomColors">
      <summary>
              Looks up a localized string similar to Custom Colors.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_PaletteColors">
      <summary>
              Looks up a localized string similar to Palette Colors.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_RecentColors">
      <summary>
              Looks up a localized string similar to Recent Colors.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_StandardColors">
      <summary>
              Looks up a localized string similar to Standard Colors.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.ColorPicker_TransparentColor">
      <summary>
              Looks up a localized string similar to Transparent.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight_Extended.PropertyGrid_Reset">
      <summary>
              Looks up a localized string similar to Reset property value.
            </summary>
    </member>
    <member name="T:C1.WPF.Extended.ReflectionBackgroundConverter">
      <summary>
            Converts a <see cref="T:System.Windows.Media.LinearGradientBrush" /> into an appropriate brush for <see cref="!:C1Reflector.ReflectionBackground" />.
            </summary>
    </member>
  </members>
</doc>